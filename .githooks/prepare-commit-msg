#!/usr/bin/env bash
# Formats subject as: <branch>:v<VERSION> [(#N)] - <your subject>
# Prompts (with timeout) for issue number on dev/stage only.

# Don't fail on empty vars; don't use -e to avoid aborting the commit
# Merge commits: leave default message alone
[ "${2:-}" = "merge" ] && exit 0

msgfile="$1"
branch="$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "unknown")"
version="$(tr -d '\n' < VERSION 2>/dev/null || echo '0.0.0')"
prefix="v${version}"

# Only apply on dev/stage
case "$branch" in
  dev|stage) ;;
  *) exit 0;;
esac

# Read current message
orig="$(cat "$msgfile")"
subject="${orig%%$'\n'*}"
body=""
if [[ "$orig" == *$'\n'* ]]; then body="${orig#*$'\n'}"; fi

# If already starts with the current prefix, do nothing
case "$subject" in
  "$prefix "*|"${prefix} -"*) exit 0;;
esac

# Extract existing issue (from subject or body), if any
issue=""
if [[ "$subject" =~ \#([0-9]+) ]]; then issue="${BASH_REMATCH[1]}"; fi
if [[ -z "$issue" && "$body" =~ \#([0-9]+) ]]; then issue="${BASH_REMATCH[1]}"; fi

# Strip any existing "(#N) - " or duplicate prefix the user typed
clean_subject="$(printf '%s' "$subject" \
  | sed -E "s|^${branch}:v${version}( \\(#[0-9]+\\))?[[:space:]]*-[[:space:]]*||" \
  | sed -E 's/^[[:space:]]*\(#?[0-9]+\)[[:space:]]*-[[:space:]]*//')"

# Prompt only if no issue yet AND a TTY is present; timeout avoids hangs
if [[ -z "$issue" ]] && { [ -t 0 ] || [ -t 1 ]; }; then
  printf "Attach a GitHub issue (digits only, Enter to skip): # " > /dev/tty
  if read -r -t 20 num < /dev/tty 2>/dev/null; then
    [[ "$num" =~ ^[0-9]+$ ]] && issue="$num"
  fi
fi

# Build new subject
if [[ -n "$issue" ]]; then
  new_subject="${prefix} (#${issue}) - ${clean_subject}"
else
  new_subject="${prefix} - ${clean_subject}"
fi

# Write back (preserve body)
{
  printf '%s\n' "$new_subject"
  [[ -n "$body" ]] && printf '%s' "$body"
} > "$msgfile"

exit 0

